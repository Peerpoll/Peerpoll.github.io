<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://peerpoll.github.io/</id>
    <title>Peer&apos;s blog</title>
    <updated>2019-07-12T07:31:09.343Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://peerpoll.github.io/"/>
    <link rel="self" href="https://peerpoll.github.io//atom.xml"/>
    <subtitle>书写博客加强学习</subtitle>
    <logo>https://peerpoll.github.io//images/avatar.png</logo>
    <icon>https://peerpoll.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Peer&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[Snakemake学习]]></title>
        <id>https://peerpoll.github.io//post/snakemake-xue-xi</id>
        <link href="https://peerpoll.github.io//post/snakemake-xue-xi">
        </link>
        <updated>2019-07-12T06:32:29.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Snakemake Rule</strong>
<strong>rule sort(名字):</strong>
<strong>input:</strong> 'xxx.txt'#(输入文件的文件名)
<strong>output:</strong> 'xxxxx.txt'##(处理后的结果文件名)
<strong>shell:</strong>
'sort {input}&gt;{output}'  ###相应需要运行的代码   python(<strong>run:</strong>)  R(<strong>run:R()</strong>)</p>
<h5 id="建议安装anaconda方便使用">建议安装<a href="https://www.anaconda.com/downloads">anaconda</a>，方便使用</h5>
<p>利用anaconda创建一个专属环境</p>
<pre><code>conda create -n snakemake python=3*
</code></pre>
<p>激活环境</p>
<pre><code>source activate snakemake
</code></pre>
<p>安装snakemake
建议先安装 <a href="https://quantstack.net/mamba.html">mamba</a>  能够快速解决环境问题</p>
<pre><code>conda install mamba -c conda-forge
再安装snakemake
mamba install snakemake
</code></pre>
<p>关闭环境</p>
<pre><code>source deactivate
</code></pre>
<p>基本方法是这样的，根据需要编写自己的代码脚本
主要参考孟叔的<a href="https://www.bilibili.com/video/av45832590/?p=1">使用SnakeMake搭建生信流程</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python数据处理常使用的模块及介绍]]></title>
        <id>https://peerpoll.github.io//post/python-shu-ju-chu-li-chang-shi-yong-de-mo-kuai-ji-jie-shao</id>
        <link href="https://peerpoll.github.io//post/python-shu-ju-chu-li-chang-shi-yong-de-mo-kuai-ji-jie-shao">
        </link>
        <updated>2019-07-12T01:24:50.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li><strong>numpy</strong> 高效的处理数据、提供数组支持，是许多模块的基础，如：pandas、scipy、matplotlib</li>
<li><strong>pandas</strong> 主要用于进行数据探索和数据分析</li>
<li><strong>matplotlib</strong> 用于作图，进行可视化</li>
<li><strong>scipy</strong> 进行数值计算，支持矩阵运算，还有许多高等数据处理，比如积分、傅里叶变换、微分方程求解</li>
<li><strong>statsmodels</strong> 主要用于统计分析</li>
<li><strong>Gensim</strong> 用于文本挖掘</li>
<li><strong>sklearn</strong> 用于机器学习</li>
<li><strong>keras</strong> 用于深度学习</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[pthon中的正则表达式]]></title>
        <id>https://peerpoll.github.io//post/pthon-zhong-de-zheng-ze-biao-da-shi</id>
        <link href="https://peerpoll.github.io//post/pthon-zhong-de-zheng-ze-biao-da-shi">
        </link>
        <updated>2019-07-10T02:06:24.000Z</updated>
        <content type="html"><![CDATA[<p>正则可以用来快速检索文本，实现一些替换文本的操作。</p>
<pre><code>#正则表达式
import re
a='C|C++|Java|C#|Python|Javascript'
re.findall('Python',a)###findall 直接在字符串中查找所有关键字

##使用规则查找关键词，规则是正则表达式的灵魂
b='C0C++7Java8C#9Python3Javascript'
##查找其中的数字
r=re.findall(&quot;\d&quot;,b)###\d 查找数字
print(r)
#'Python'是普通字符  '\d'是元字符
#元字符根据使用可以现查现用
print(re.findall(&quot;\D&quot;,b)) ###\D查找非数字字符

s='abc,acc,adc,aec,afc,ahc'
print(re.findall('a[cf]c',s))### 使用[]实现或操作
print(re.findall('a[^cf]c',s)) ###使用^实现 取反 非  操作
print(re.findall('a[c-f]c',s))  ###实现取一系列字符操作

#概括字符集
#\d \D \w 单词字符 [A-Za-z0-9_]   \W  匹配非单词字符
#\s 空白字符 “ ” \t \n 
#. 换行符之外的所有字符

#数量词
print(re.findall('[a-z]{3,6}',s))  ##{n,m} 匹配n-m个字符 
m='pytho0python1pythonn2'
#* 匹配*号前的字符 0次或者无限多次
print(re.findall('python*',m))
#+ 匹配+号前的字符 1次或者无限多次
print(re.findall('python+',m))
#? 匹配？号前的字符 0次或者1次
print(re.findall('python?',m))


#贪婪和非贪婪
#贪婪就是一直匹配到不满足条件的字符
#非贪婪  在匹配字符后加?
print(re.findall('[a-z]{3,6}?',s))

#边界匹配
qq='1035655101'
#4~8
print(re.findall('^\d{4,8}$',qq))  ###匹配规则前加^规则后加$ 进行完全匹配   ^字符固定起始  $字符固定结尾
x='pythonpythonpythonpythonss'
print(re.findall('(python){2}',x)) ###查找一个完整的字符多次 ()表示并且

###findall中的flags参数  
### re.I 可以不区分大小写匹配
lan='PythonC#\nJavaPHP'
print(re.findall('c#',lan,re.I))   ### re.I 可以不区分大小写匹配  
print(re.findall('c#.{1}',lan, re.I | re.S))    ###re.S 表示 . 匹配任意字符，包括换行符  |表示两种规则都适用

##sub函数  查找并进行替换
lan='PythonC#JavaPHPC#'
print(re.sub('C#',&quot;GO&quot;,lan,count=0))  ##count=0时对所有满足的字符进行替换
print(re.sub('C#',&quot;GO&quot;,lan,count=1))  ##count=1时对替换固定数目
##使用replace可以进行简单的替换
print(lan.replace(&quot;C#&quot;,&quot;GO&quot;))

##函数形式进行替换
def convert(value):
    #print(value)
    matched=value.group()
    return '!!'+matched+'!!'

print(re.sub('C#',convert,lan))
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网页版blast构建]]></title>
        <id>https://peerpoll.github.io//post/wang-ye-ban-blast-gou-jian</id>
        <link href="https://peerpoll.github.io//post/wang-ye-ban-blast-gou-jian">
        </link>
        <updated>2019-07-01T12:44:45.000Z</updated>
        <content type="html"><![CDATA[<h5 id="因为构建网站功能需要搭建一个blast功能主要是利用了ncbi提供的blast进行构建-主要工作如下">因为构建网站功能需要搭建一个blast功能，主要是利用了NCBI提供的blast+进行构建。主要工作如下：</h5>
<h4 id="1下载blast">1.下载blast+</h4>
<h4 id="blast工具"><a href="ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/">blast+工具</a> 下载所需要的版本</h4>
<h4 id="2根据需要的参数设置网页的界面">2.根据需要的参数设置网页的界面</h4>
<h4 id="相关的参数详情">相关的参数详情：</h4>
<ul>
<li>序列输入  =》 -query (file_in) 输入你要查找的序列，将上传的序列文件名放进去，最好是绝对路径</li>
<li>查询范围  =》 -query_loc (n-x) 需要查找的位置（start-stop） ps:start/stop输入是数字型</li>
<li>查询类型  =》 -task (string) 选择查询的类型，blastn下有好几种类型&quot;blastn&quot;,&quot;blastn-short&quot;,&quot;megablast&quot;各有优缺</li>
<li>保留阈值  =》 -evalue 保留匹配的阈值，自己设定，一般默认是10</li>
<li>匹配长度  =》 -word_size (integer,&gt;=4) 设置最佳匹配长度</li>
<li>匹配得分  =》 -reward (int,&gt;=0) 匹配上的得分</li>
<li>错配罚分  =》 -penalty (int,&gt;=0) 错配的罚分</li>
<li>open gap  =》 -gapopen(int) open gap 分数</li>
<li>extend gap =》 -gapextend(int) extend gap分数</li>
<li>筛选    =》 -dust(str) &quot;yes&quot;or&quot;no&quot; 筛选低复杂区域</li>
<li>结果输出  =》 -outfmt 输出结果格式；我用的是 -6 用&quot;\t&quot;格式分割  -7 用&quot;\t&quot;分割，包含注释；输出还有一些列格式，没怎么用到，所以不赘述</li>
<li>-6 输出一般是12列
Queryid（查询id）　　Subject id（比对上的id） 　　identity（配对一致性%）　　alignment length(比对上的区域长度)　　mismatches(错配数)
gap open　　q.start（匹配上的查询序列起点）　　q.end（匹配上查询序列终点）　　s.start(匹配上目标序列的起点)　　s.end(匹配上目标序列的终点)       e-value　　bitscore(比对上的的得分)</li>
</ul>
<h4 id="创建自己的基因库">创建自己的基因库</h4>
<blockquote>
<p>载入自己的需要的fa数据作为库 blastn 只要nucl库
命令：makeblastdb.exe -in 基因组genomic.fna -parse_seqids -hash_index -dbtype nucl -out 自定义库名</p>
</blockquote>
<h4 id="利用脚本对上传的数据进行处理">利用脚本对上传的数据进行处理</h4>
<p><strong>我使用的是python脚本，linux上可以直接运行命令</strong></p>
<pre><code>&quot;&quot;&quot;blastn -query %s  -db %s -out %s -task %s -evalue %d -word_size %d -reward %d -penalty %d -gapopen %d -gapextend %d -dust %s -outfmt 6 &quot;&quot;&quot;%(inname,db,outname,task,evalue,word_size,reward,penalty,gapopen,gapextend,dust)
</code></pre>
<h4 id="对获取的结果可以进行美化可以使用blasterjs对结果展示惊醒美化">对获取的结果可以进行美化，可以使用blasterJS对结果展示惊醒美化</h4>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[申明]]></title>
        <id>https://peerpoll.github.io//post/shen-ming</id>
        <link href="https://peerpoll.github.io//post/shen-ming">
        </link>
        <updated>2019-07-01T12:36:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="将之前的博客园中的文章转到这边以后主要在这个博客上进行更新">将之前的博客园中的文章转到这边，以后主要在这个博客上进行更新</h2>
]]></content>
    </entry>
</feed>